// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=repository/interfaces_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/lucas-moura1/mercadobitcoin-challenge/entity"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepository) Create(account *entity.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), account)
}

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
	isgomock struct{}
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// AddToBalance mocks base method.
func (m *MockWalletRepository) AddToBalance(tx *gorm.DB, accountID uuid.UUID, assetSymbol string, amount decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBalance", tx, accountID, assetSymbol, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBalance indicates an expected call of AddToBalance.
func (mr *MockWalletRepositoryMockRecorder) AddToBalance(tx, accountID, assetSymbol, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBalance", reflect.TypeOf((*MockWalletRepository)(nil).AddToBalance), tx, accountID, assetSymbol, amount)
}

// Create mocks base method.
func (m *MockWalletRepository) Create(tx *gorm.DB, wallet *entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWalletRepositoryMockRecorder) Create(tx, wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletRepository)(nil).Create), tx, wallet)
}

// GetByAccountAndAsset mocks base method.
func (m *MockWalletRepository) GetByAccountAndAsset(tx *gorm.DB, accountID uuid.UUID, assetSymbol string) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountAndAsset", tx, accountID, assetSymbol)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountAndAsset indicates an expected call of GetByAccountAndAsset.
func (mr *MockWalletRepositoryMockRecorder) GetByAccountAndAsset(tx, accountID, assetSymbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountAndAsset", reflect.TypeOf((*MockWalletRepository)(nil).GetByAccountAndAsset), tx, accountID, assetSymbol)
}

// GetByAccountID mocks base method.
func (m *MockWalletRepository) GetByAccountID(accountID uuid.UUID) ([]*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountID", accountID)
	ret0, _ := ret[0].([]*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountID indicates an expected call of GetByAccountID.
func (mr *MockWalletRepositoryMockRecorder) GetByAccountID(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountID", reflect.TypeOf((*MockWalletRepository)(nil).GetByAccountID), accountID)
}

// SubtractFromBalance mocks base method.
func (m *MockWalletRepository) SubtractFromBalance(tx *gorm.DB, accountID uuid.UUID, assetSymbol string, amount decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractFromBalance", tx, accountID, assetSymbol, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractFromBalance indicates an expected call of SubtractFromBalance.
func (mr *MockWalletRepositoryMockRecorder) SubtractFromBalance(tx, accountID, assetSymbol, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractFromBalance", reflect.TypeOf((*MockWalletRepository)(nil).SubtractFromBalance), tx, accountID, assetSymbol, amount)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
	isgomock struct{}
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepository) Create(tx *gorm.DB, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepositoryMockRecorder) Create(tx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepository)(nil).Create), tx, order)
}

// GetByID mocks base method.
func (m *MockOrderRepository) GetByID(id uuid.UUID, status ...string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderRepositoryMockRecorder) GetByID(id any, status ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, status...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderRepository)(nil).GetByID), varargs...)
}

// GetMatchingOrders mocks base method.
func (m *MockOrderRepository) GetMatchingOrders(tx *gorm.DB, accountID uuid.UUID, instrumentPair, orderType string, price decimal.Decimal, isBuyOrder bool) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingOrders", tx, accountID, instrumentPair, orderType, price, isBuyOrder)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingOrders indicates an expected call of GetMatchingOrders.
func (mr *MockOrderRepositoryMockRecorder) GetMatchingOrders(tx, accountID, instrumentPair, orderType, price, isBuyOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetMatchingOrders), tx, accountID, instrumentPair, orderType, price, isBuyOrder)
}

// GetOpenOrdersByInstrumentPair mocks base method.
func (m *MockOrderRepository) GetOpenOrdersByInstrumentPair(instrumentPair string) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenOrdersByInstrumentPair", instrumentPair)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOrdersByInstrumentPair indicates an expected call of GetOpenOrdersByInstrumentPair.
func (mr *MockOrderRepositoryMockRecorder) GetOpenOrdersByInstrumentPair(instrumentPair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOrdersByInstrumentPair", reflect.TypeOf((*MockOrderRepository)(nil).GetOpenOrdersByInstrumentPair), instrumentPair)
}

// UpdateRemainingAndStatus mocks base method.
func (m *MockOrderRepository) UpdateRemainingAndStatus(tx *gorm.DB, id uuid.UUID, quantity decimal.Decimal, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemainingAndStatus", tx, id, quantity, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemainingAndStatus indicates an expected call of UpdateRemainingAndStatus.
func (mr *MockOrderRepositoryMockRecorder) UpdateRemainingAndStatus(tx, id, quantity, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemainingAndStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateRemainingAndStatus), tx, id, quantity, status)
}

// UpdateStatus mocks base method.
func (m *MockOrderRepository) UpdateStatus(id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderRepositoryMockRecorder) UpdateStatus(id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateStatus), id, status)
}

// MockTradeRepository is a mock of TradeRepository interface.
type MockTradeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTradeRepositoryMockRecorder
	isgomock struct{}
}

// MockTradeRepositoryMockRecorder is the mock recorder for MockTradeRepository.
type MockTradeRepositoryMockRecorder struct {
	mock *MockTradeRepository
}

// NewMockTradeRepository creates a new mock instance.
func NewMockTradeRepository(ctrl *gomock.Controller) *MockTradeRepository {
	mock := &MockTradeRepository{ctrl: ctrl}
	mock.recorder = &MockTradeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeRepository) EXPECT() *MockTradeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTradeRepository) Create(tx *gorm.DB, trade *entity.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, trade)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTradeRepositoryMockRecorder) Create(tx, trade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTradeRepository)(nil).Create), tx, trade)
}
